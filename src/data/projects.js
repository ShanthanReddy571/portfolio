export const ALL_PROJECTS = [
  {
    slug: "adas-monocular-3d-scene-understanding",
    title: "Monocular 3D Scene Understanding for ADAS",
    description:
      "Depth estimation, lane detection, BEV rendering, and 3D boxes with CUDA‑accelerated PyTorch3D and Open3D.",
    tags: ["PyTorch", "CUDA", "OpenCV", "YOLO", "3D", "HPC"],
    live: "#",
    repo: "#",
    image: "/projects/adas-monocular-3d-scene-understanding.svg",
    details: {
      status: "Case study",
      overview:
        "Built an ADAS prototype that lifts monocular frames into BEV, estimates depth and lanes, and renders 3D boxes for perception tasks.",
      role: "Lead developer: model integration, CUDA acceleration, evaluation",
      contribution: "Integrated models, profiled kernels, designed BEV rendering, and authored evaluation scripts.",
      teamSize: "Team of 3",
      problem: "Estimate depth and lane geometry from a single camera for ADAS scenarios, enabling BEV planning and 3D awareness without stereo/LiDAR.",
      stack: ["PyTorch", "PyTorch3D", "OpenCV", "Open3D", "CUDA", "Python"],
      highlights: [
        "CUDA kernels and batched inference delivered a 1.6× GPU speedup.",
        "35% reduction in frame time on full driving sequences.",
        "Integrated YOLO/MiDaS and SMPL; rendered scenes with Open3D.",
      ],
      architecture: [
        "Ingestion: video frames → preprocessing (OpenCV)",
        "Models: MiDaS depth, YOLO detection, custom BEV lift", 
        "Render: Open3D scene graph with camera extrinsics",
      ],
      results: ["Real‑time preview on HPC nodes; export to ONNX for portability."],
      benchmarks: [
        { label: "Frame time", before: "~30 ms", after: "~19 ms", delta: "−35%" },
        { label: "GPU speed", before: "1.0×", after: "1.6×", delta: "+60%" },
      ],
      diagram: "/projects/adas-monocular-3d-scene-understanding-diagram.svg",
      gallery: [
        { src: "/projects/adas-monocular-3d-scene-understanding.svg", alt: "ADAS cover", caption: "BEV rendering and 3D boxes" },
        { src: "/projects/adas-monocular-3d-scene-understanding-diagram.svg", alt: "Pipeline diagram", caption: "Pipeline overview" },
      ],
      challenges: ["Monocular scale ambiguity", "Lane topology under occlusions", "GPU memory pressure on hi‑res frames"],
      future: ["Fuse IMU for scale stabilization", "Temporal smoothing with ConvLSTMs", "Quantization for edge deployment"],
    },
  },
  {
    slug: "cloud-intrusion-detection",
    title: "Cloud Intrusion Detection — Advanced Threat Prevention",
    description:
      "Cloud‑native IDS with GPU‑parallel preprocessing and anomaly models; 40% faster inference.",
    tags: ["Python", "ML", "Security", "CUDA", "Cloud"],
    live: "#",
    repo: "#",
    image: "/projects/cloud-intrusion-detection.svg",
    details: {
      status: "Case study",
      overview:
        "Experimental IDS that extracts features from telemetry and CV signals; trains light‑GBM/autoencoder models for anomaly scoring.",
      role: "Designed pipeline, implemented feature store and inference service",
      contribution: "Built feature store and inference endpoints; GPU batching; alerting heuristics.",
      teamSize: "Team of 2",
      problem: "Detect anomalous activity in cloud workloads and CV pipelines with low latency and high precision.",
      stack: ["Python", "PyTorch", "LightGBM", "CUDA", "FastAPI", "Docker"],
      highlights: [
        "GPU‑batched transforms lowered preprocessing latency by ~40%.",
        "Thresholding and explainability with SHAP for triage.",
      ],
      architecture: ["Ingest → Feature store → Inference service → Alerts/Web UI"],
      results: ["Reduced time‑to‑alert and lower false positives on lab datasets."],
      benchmarks: [
        { label: "Preproc latency", before: "~100 ms", after: "~60 ms", delta: "−40%" },
      ],
      diagram: "/projects/cloud-intrusion-detection-diagram.svg",
      gallery: [
        { src: "/projects/cloud-intrusion-detection.svg", alt: "Cloud IDS", caption: "Signal streams and scoring" },
        { src: "/projects/cloud-intrusion-detection-diagram.svg", alt: "Architecture", caption: "Ingest → Features → Inference → Alerts" },
      ],
      challenges: ["Imbalanced datasets", "Concept drift", "Feature leakage risks"],
      future: ["Online learning", "Sigstore attestation for model artifacts", "Vector DB for embeddings"],
    },
  },
  {
    slug: "pintos-os-kernel-extensions",
    title: "Pintos OS — Scheduling, Threads, and VM",
    description:
      "Extended Pintos with priority donation, MLFQ scheduler, lazy loading, mmap, and demand paging.",
    tags: ["C", "OS", "Kernel", "Scheduling"],
    live: "#",
    repo: "#",
    image: "/projects/pintos-os-kernel-extensions.svg",
    details: {
      status: "Case study",
      overview: "Educational OS enhancements focused on concurrency and virtual memory.",
      role: "Kernel contributor: scheduler, threads, VM, filesys",
      contribution: "Implemented MLFQS, priority donation, and VM features; wrote stress tests.",
      teamSize: "Team of 2",
      problem: "Improve CPU utilization and responsiveness under mixed workloads; add VM features to support larger processes.",
      stack: ["C", "GDB", "x86", "Make"],
      highlights: [
        "Implemented priority scheduling with donation and load‑average tracking.",
        "Demand paging, memory‑mapped files, and file cache improvements.",
      ],
      architecture: ["Thread subsystem, scheduler, VM, filesys layers"],
      results: ["25% higher scheduling efficiency on CPU‑bound benchmarks."],
      benchmarks: [
        { label: "Throughput", before: "1.0×", after: "1.25×", delta: "+25%" },
      ],
      diagram: "/projects/pintos-os-kernel-extensions-diagram.svg",
      gallery: [
        { src: "/projects/pintos-os-kernel-extensions.svg", alt: "Kernel work", caption: "Scheduler & VM areas" },
        { src: "/projects/pintos-os-kernel-extensions-diagram.svg", alt: "Kernel diagram", caption: "Threads/Scheduler/VM interactions" },
      ],
      challenges: ["Priority inversion", "Thrashing control", "File cache coherence"],
      future: ["NUMA‑aware scheduling", "Preemptible kernel", "Copy‑on‑write fork"],
    },
  },
  {
    slug: "connected-associate-retail-platform",
    title: "Connected Associate — Real‑Time Retail Platform",
    description:
      "React Native + Node services for lane management across 100k+ devices; MQTT events, OAuth2/OIDC, K8s; 99.9% uptime.",
    tags: ["React Native", "TypeScript", "MQTT", "Kubernetes", "Docker"],
    live: "#",
    repo: "#",
    image: "/projects/connected-associate-retail-platform.svg",
    details: {
      status: "Case study",
      overview:
        "Production app enabling real‑time self‑checkout lane orchestration; used by thousands of associates.",
      role: "Feature owner for messaging and auth; led testing strategy",
      contribution: "Owned MQTT flows and auth; introduced CI tests; coordinated rollout with SRE.",
      teamSize: "Team of 6+",
      problem: "Low‑latency sync for lane states and tasks across thousands of devices on constrained networks.",
      stack: ["React Native", "TypeScript", "Node.js", "MQTT", "Kubernetes", "Docker", "OpenID"],
      highlights: [
        "~40% lower sync latency by adopting MQTT and light payloads.",
        "99.9% uptime through robust E2E tests and CI.",
        "OAuth2 + OIDC flows streamlined secure access for 2k+ users.",
      ],
      architecture: ["RN client → API gateway → MQTT broker → K8s microservices → Postgres"],
      results: ["20% drop in support tickets post‑launch."],
      benchmarks: [
        { label: "Sync latency", before: "~1200 ms", after: "~720 ms", delta: "−40%" },
        { label: "Uptime", before: "99.0%", after: "99.9%", delta: "+0.9 pp" },
      ],
      diagram: "/projects/connected-associate-retail-platform-diagram.svg",
      gallery: [
        { src: "/projects/connected-associate-retail-platform.svg", alt: "Connected associate", caption: "Lane orchestration" },
        { src: "/projects/connected-associate-retail-platform-diagram.svg", alt: "Realtime flows", caption: "MQTT and API flows" },
      ],
      challenges: ["Offline handling", "Schema evolution without downtime", "Store‑level network variability"],
      future: ["Protobuf payloads", "Delta sync", "Edge cache for regional stores"],
    },
  },
  {
    slug: "panoramic-image-stitcher",
    title: "Panoramic Image Stitcher (RANSAC, Homography)",
    description:
      "SIFT/FLANN feature match, RANSAC homography, and blending; ~92% alignment accuracy and 40% lower latency.",
    tags: ["OpenCV", "RANSAC", "CUDA", "Computer Vision"],
    live: "#",
    repo: "#",
    image: "/projects/panoramic-image-stitcher.svg",
    details: {
      status: "Case study",
      overview: "Research prototype for panoramic stitching and preview.",
      role: "Computer vision intern: pipeline design and optimization",
      contribution: "Optimized feature matching and warping; built preview pipeline; ran evals.",
      teamSize: "Team of 3",
      problem: "Stitch multiple camera frames quickly with high alignment quality for consumer devices.",
      stack: ["OpenCV", "CUDA", "C++", "Python"],
      highlights: ["Perspective transform via homography; preview for hi‑res input"],
      architecture: ["Keypoint detection → Matching → RANSAC → Warp → Blend"],
      results: ["~92% aligned pairs on internal datasets."],
      benchmarks: [
        { label: "Latency", before: "~500 ms", after: "~300 ms", delta: "−40%" },
        { label: "Alignment accuracy", before: "~80%", after: "~92%", delta: "+12 pp" },
      ],
      diagram: "/projects/panoramic-image-stitcher-diagram.svg",
      gallery: [
        { src: "/projects/panoramic-image-stitcher.svg", alt: "Stitching", caption: "Warp and blend" },
        { src: "/projects/panoramic-image-stitcher-diagram.svg", alt: "Pipeline", caption: "Features → RANSAC → Warp" },
      ],
      challenges: ["Parallax", "Motion blur", "Low‑texture scenes"],
      future: ["Mesh warp to reduce parallax", "GPU‑resident blending", "Auto‑exposure compensation"],
    },
  },
  {
    slug: "realtime-ops-dashboard",
    title: "Retail Ops Dashboard — Real‑Time Analytics",
    description:
      "Next.js dashboard aggregating MQTT topics and telemetry; WebSockets for live updates; RBAC + exports.",
    tags: ["Next.js", "WebSockets", "MQTT", "RBAC"],
    live: "#",
    repo: "#",
    image: "/projects/realtime-ops-dashboard.svg",
    details: {
      status: "Case study",
      overview: "Operational analytics surface for retail lanes.",
      role: "Full‑stack developer: real‑time UI and snapshot pipeline",
      contribution: "Implemented WebSocket layer, live charts, and snapshot exporter.",
      teamSize: "Team of 3",
      problem: "Provide actionable visibility into store operations with second‑level latency.",
      stack: ["Next.js", "WebSockets", "MQTT", "Postgres"],
      highlights: ["Live charts, incident feed, and store snapshots"],
      architecture: ["Broker → Stream processor → REST/WS → Next.js UI"],
      results: ["Lower MTTR via real‑time visibility"],
      benchmarks: [
        { label: "MTTR", before: "~15 min", after: "~9 min", delta: "−40%" },
      ],
      diagram: "/projects/realtime-ops-dashboard-diagram.svg",
      gallery: [
        { src: "/projects/realtime-ops-dashboard.svg", alt: "Dashboard", caption: "Live charts" },
        { src: "/projects/realtime-ops-dashboard-diagram.svg", alt: "Streams", caption: "Broker → Processor → UI" },
      ],
      challenges: ["Backpressure on spikes", "Multi‑tenant RBAC"],
      future: ["SLO dashboards", "Aggregations with Materialized Views"],
    },
  },
  {
    slug: "ub-course-site-redesign",
    title: "Course Portal Redesign (UB)",
    description:
      "Frontend refactor and asset strategy reduced page loads by ~60%; improved accessibility and responsiveness.",
    tags: ["React", "Performance", "Accessibility"],
    live: "#",
    repo: "#",
    image: "/projects/ub-course-site-redesign.svg",
    details: {
      status: "Case study",
      overview: "Teaching site update for better UX and performance.",
      role: "Frontend engineer: architecture + perf passes",
      contribution: "Refactored routing, optimized assets, added a11y improvements.",
      teamSize: "Team of 2",
      problem: "Reduce load time and improve responsiveness across devices for students and TAs.",
      stack: ["React", "Next.js", "Vercel"],
      highlights: ["Code‑split routes, image optimization, preconnects"],
      architecture: ["Next.js static pages + incremental hydration"],
      results: ["~60% faster loads across devices"],
      benchmarks: [
        { label: "Page load", before: "~2.5 s", after: "~1.0 s", delta: "−60%" },
      ],
      diagram: "/projects/ub-course-site-redesign-diagram.svg",
      gallery: [
        { src: "/projects/ub-course-site-redesign.svg", alt: "Course portal", caption: "Optimized UI" },
        { src: "/projects/ub-course-site-redesign-diagram.svg", alt: "Perf work", caption: "Code‑split & assets" },
      ],
      challenges: ["Legacy assets", "Blocking scripts"],
      future: ["Offline PWA", "Content search"],
    },
  },
  {
    slug: "secure-notes",
    title: "Secure Notes",
    description:
      "E2E encrypted notes with Prisma, NextAuth, and Postgres; per‑device keys and shared workspaces.",
    tags: ["Next.js", "Prisma", "Postgres", "Security"],
    live: "#",
    repo: "#",
    image: "/projects/secure-notes.svg",
    details: {
      status: "Concept",
      overview: "Zero‑knowledge notes app for teams.",
      role: "Designer & developer",
      contribution: "Designed crypto flow and DB schema; implemented auth and RLS.",
      teamSize: "Solo",
      problem: "Protect data at rest and enable secure sharing.",
      stack: ["Next.js", "Prisma", "NextAuth", "Postgres"],
      highlights: ["Hybrid encryption, RLS, audit trails"],
      architecture: ["App router API routes + Prisma + NextAuth + RLS"],
      results: ["Fully encrypted at rest; share via ACLs"],
      benchmarks: [],
      diagram: "/projects/secure-notes-diagram.svg",
      gallery: [
        { src: "/projects/secure-notes.svg", alt: "Secure notes", caption: "Zero‑knowledge model" },
        { src: "/projects/secure-notes-diagram.svg", alt: "Architecture", caption: "Keys, RLS, auth" },
      ],
      future: ["CRDT collaboration", "Mobile app"],
    },
  },
  {
    slug: "airbnb-nyc-pricing-explorer",
    title: "Airbnb NYC Pricing Explorer",
    description:
      "Interactive maps with seasonal price trends and listing insights; Next.js + Python FastAPI backend.",
    tags: ["Next.js", "Charts", "Python"],
    live: "#",
    repo: "#",
    image: "/projects/airbnb-nyc-pricing-explorer.svg",
    details: {
      status: "Case study",
      overview: "Data exploration for NYC listings.",
      role: "Full‑stack developer",
      contribution: "Built FastAPI backend and SSG pages; charts and filters.",
      teamSize: "Solo",
      problem: "Help travelers and hosts reason about price trends and neighborhoods.",
      stack: ["Next.js", "FastAPI", "Postgres", "Charting"],
      highlights: ["Map layers, filters, and exportable charts"],
      architecture: ["FastAPI + Postgres + Next.js server components"],
      results: ["Actionable neighborhood price insights"],
      benchmarks: [],
      diagram: "/projects/airbnb-nyc-pricing-explorer-diagram.svg",
      gallery: [
        { src: "/projects/airbnb-nyc-pricing-explorer.svg", alt: "NYC explorer", caption: "Price trends" },
        { src: "/projects/airbnb-nyc-pricing-explorer-diagram.svg", alt: "Stack", caption: "FastAPI + SSG" },
      ],
      future: ["Forecasting", "AirDNA import"],
    },
  },
  {
    slug: "algoplayground",
    title: "AlgoPlayground",
    description:
      "Browser visualizer for graphs and dynamic programming with an interactive stepper.",
    tags: ["Next.js", "Canvas", "Algorithms"],
    live: "#",
    repo: "#",
    image: "/projects/algoplayground.svg",
    details: {
      status: "Case study",
      overview: "Educational tool for algorithm intuition.",
      role: "Frontend engineer",
      contribution: "Implemented simulations and renderer; UI/UX polish.",
      teamSize: "Solo",
      problem: "Make complex algorithms tangible through visuals.",
      stack: ["Next.js", "Canvas", "Workers"],
      highlights: ["Pathfinding, topological sort, DP table visualizer"],
      architecture: ["Canvas renderer + worker‑based simulations"],
      results: ["Improved interview prep and demos"],
      benchmarks: [],
      diagram: "/projects/algoplayground-diagram.svg",
      gallery: [
        { src: "/projects/algoplayground.svg", alt: "Algo", caption: "Graph viz" },
        { src: "/projects/algoplayground-diagram.svg", alt: "Design", caption: "Workers & renderer" },
      ],
      future: ["Export GIFs", "Shareable sessions"],
    },
  },
  {
    slug: "k8s-blueprint-nextjs",
    title: "Kubernetes Blueprint for Next.js",
    description:
      "IaC + GitHub Actions to build and deploy Next.js with zero‑downtime rollouts and autoscaling.",
    tags: ["Kubernetes", "Docker", "CI/CD", "GitHub Actions"],
    live: "#",
    repo: "#",
    image: "/projects/k8s-blueprint-nextjs.svg",
    details: {
      status: "Template",
      overview: "Production‑ready deployment patterns.",
      role: "DevOps engineer",
      contribution: "Wrote CI pipelines, manifests, and rollout strategy.",
      teamSize: "Solo",
      problem: "Make Next.js deployments reliable and repeatable across environments.",
      stack: ["Docker", "Kubernetes", "GitHub Actions"],
      highlights: ["Blue/green, HPA, and log shipping hooks"],
      architecture: ["Container registry → K8s manifests → Ingress + HPA"],
      results: ["Repeatable deployments across environments"],
      benchmarks: [],
      diagram: "/projects/k8s-blueprint-nextjs-diagram.svg",
      gallery: [
        { src: "/projects/k8s-blueprint-nextjs.svg", alt: "K8s blueprint", caption: "Zero‑downtime rollouts" },
        { src: "/projects/k8s-blueprint-nextjs-diagram.svg", alt: "CI/CD", caption: "Build → Deploy → Scale" },
      ],
      future: ["Pulumi/Terraform modules", "Secrets manager"],
    },
  },
  {
    slug: "edge-image-analytics",
    title: "Edge Image Analytics (Cloudflare Workers)",
    description:
      "Edge function for CV transforms and pre‑classification to cut round‑trip latency for media‑heavy flows.",
    tags: ["Edge", "Cloudflare", "OpenCV", "TypeScript"],
    live: "#",
    repo: "#",
    image: "/projects/edge-image-analytics.svg",
    details: {
      status: "Prototype",
      overview: "Running lightweight CV close to users.",
      role: "Edge developer",
      contribution: "Built workers, caching, and origin integration.",
      teamSize: "Solo",
      problem: "Reduce latency for image transformations and classification.",
      stack: ["Cloudflare Workers", "TypeScript", "OpenCV"],
      highlights: ["Resize/blur/hash at edge; origin offload"],
      architecture: ["Workers → KV/Cache → Origin API"],
      results: ["Lower TTFB for image‑heavy requests"],
      benchmarks: [],
      diagram: "/projects/edge-image-analytics-diagram.svg",
      gallery: [
        { src: "/projects/edge-image-analytics.svg", alt: "Edge CV", caption: "Edge transforms" },
        { src: "/projects/edge-image-analytics-diagram.svg", alt: "Flow", caption: "Workers → Origin" },
      ],
      future: ["WASM OpenCV", "On‑edge classification"],
    },
  },
  {
    slug: "portfolio-v2",
    title: "Portfolio v2 (This Site)",
    description:
      "Next.js App Router, Tailwind v4 tokens, animated primitives, and accessible components.",
    tags: ["Next.js", "Tailwind", "Accessibility", "DX"],
    live: "#",
    repo: "#",
    image: "/projects/portfolio-v2.svg",
    details: {
      status: "Live",
      overview: "Personal site focused on performance and DX.",
      role: "Designer & developer",
      contribution: "Designed tokens, components, and content structure.",
      teamSize: "Solo",
      problem: "Showcase work with crisp performance and modern UX.",
      stack: ["Next.js", "Tailwind v4", "App Router"],
      highlights: ["Cards, chips, and accent glow with CSS tokens"],
      architecture: ["App Router + server components + ISR"],
      results: ["Great Lighthouse scores and snappy UX"],
      benchmarks: [],
      diagram: "/projects/portfolio-v2-diagram.svg",
      gallery: [
        { src: "/projects/portfolio-v2.svg", alt: "Portfolio", caption: "Design tokens" },
        { src: "/projects/portfolio-v2-diagram.svg", alt: "App Router", caption: "Routing & sections" },
      ],
      future: ["MDX blog", "Dark‑mode animations"],
    },
  },
];

export function getProjectBySlug(slug) {
  return ALL_PROJECTS.find((p) => p.slug === slug);
}

export function getAllProjectSlugs() {
  return ALL_PROJECTS.map((p) => p.slug);
}
